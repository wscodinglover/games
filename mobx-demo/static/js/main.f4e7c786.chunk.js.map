{"version":3,"sources":["views/timerView.less","App.js","views/timerView.js","stores/todo.js","stores/index.js","stores/layout.js","routers/index.js","serviceWorker.js","index.js"],"names":["module","exports","App","TimerView","inject","observer","increment","todo","props","timer","decrement","this","layout","name","className","styles","onClick","appState","resetTimer","Component","state","observable","action","value","autorun","console","log","stores","Router","children","render","location","pathname","search","hash","slice","to","Boolean","window","hostname","match","configure","enforceActions","ReactDOM","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sGACAA,EAAOC,QAAU,CAAC,gBAAgB,iCAAiC,gBAAgB,mC,0JCKpEC,I,EAAAA,EAJf,WACE,OAAO,8C,yDC0CMC,EAnCdC,YAAO,SAAU,O,GACjBC,Y,6MAGCC,UAAY,WAAO,IACTC,EAAS,EAAKC,MAAdD,KACRA,EAAKD,UAAUC,EAAKE,Q,EAGtBC,UAAY,WAAO,IACTH,EAAS,EAAKC,MAAdD,KACRA,EAAKG,UAAUH,EAAKE,Q,wEAGZ,IAAD,EACkBE,KAAKH,MAAtBI,EADD,EACCA,OAAQL,EADT,EACSA,KAChB,OACE,kBAAC,WAAD,KACE,6BAAMK,EAAOA,OAAOC,MACpB,uCAAaN,EAAKE,OAClB,yBAAKK,UAAWC,IAAO,iBAAkBC,QAASL,KAAKL,WAAvD,KAGA,yBAAKQ,UAAWC,IAAO,iBAAkBC,QAASL,KAAKD,WAAvD,Q,gCAQJC,KAAKH,MAAMS,SAASC,iB,GA7BAC,e,MCVpBC,EAAQC,YAAW,CACrBZ,MAAO,EACPS,WAFqB,WAGnBP,KAAKF,MAAQ,KAIjBW,EAAMd,UAAYgB,YAAO,SAAAC,GAAK,OAAKH,EAAMX,MAAQc,EAAQ,IACzDH,EAAMV,UAAYY,YAAO,SAAAC,GAAK,OAAKH,EAAMX,MAAQc,EAAQ,IAGzDC,YAAQ,WACNC,QAAQC,IAAI,cAAeN,EAAMX,SAEpBW,ICRAO,EALA,CACbpB,KDYaa,ECXbR,OCHUS,YAAW,CACnBT,OAAO,CACLW,MAAM,GACNV,KAAK,4B,QCcIe,EAdA,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAQ,oBAAGC,SAAYC,EAAf,EAAeA,SAAUC,EAAzB,EAAyBA,OAAQC,EAAjC,EAAiCA,KAAjC,MACO,MAAbF,GAA2C,MAAvBA,EAASG,OAAO,GAClC,kBAAC,IAAD,CAAUC,GAAE,UAAKJ,EAASG,MAAM,GAAI,IAAxB,OAA6BF,GAA7B,OAAsCC,KAElDL,OCAUQ,QACW,cAA7BC,OAAOP,SAASQ,UAEe,UAA7BD,OAAOP,SAASQ,UAEhBD,OAAOP,SAASQ,SAASC,MACvB,2D,MCJNC,YAAU,CAAEC,eAAgB,aAE5BC,IAASb,OACP,kBAAC,IAAaH,EACZ,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,IAAIC,UAAW5C,IACjC,kBAAC,IAAD,CAAO0C,OAAK,EAACC,KAAK,QAAQC,UAAW3C,IACrC,kBAAC,IAAD,CAAUiC,GAAG,SAInBW,SAASC,eAAe,SDuGpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f4e7c786.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"increment-num\":\"timerView_increment-num__1S9tt\",\"decrement-num\":\"timerView_decrement-num__1gD6r\"};","import React from 'react';\n\nfunction App() {\n  return <div> this is app</div>;\n}\n\nexport default App;\n","import React, { Component, Fragment } from \"react\";\r\n\r\nimport { observer, inject } from \"mobx-react\";\r\n\r\nimport styles from \"./timerView.less\";\r\n\r\n// @inject(stores => ({\r\n//   layout: stores.layout,\r\n//   todo: stores.todo\r\n// }))\r\n@inject(\"layout\", \"todo\")\r\n@observer\r\nclass TimerView extends Component {\r\n\r\n  increment = () => {\r\n    const { todo } = this.props;\r\n    todo.increment(todo.timer)\r\n  };\r\n\r\n  decrement = () => {\r\n    const { todo } = this.props;\r\n    todo.decrement(todo.timer)\r\n  };\r\n\r\n  render() {\r\n    const { layout, todo } = this.props;\r\n    return (\r\n      <Fragment>\r\n        <div>{layout.layout.name}</div>\r\n        <div>timer: {todo.timer}</div>\r\n        <div className={styles[\"increment-num\"]} onClick={this.increment}>\r\n          +\r\n        </div>\r\n        <div className={styles[\"decrement-num\"]} onClick={this.decrement}>\r\n          -\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n\r\n  onReset() {\r\n    this.props.appState.resetTimer();\r\n  }\r\n}\r\n\r\nexport default TimerView;\r\n","import { observable, action, autorun } from \"mobx\";\r\n\r\nvar state = observable({\r\n  timer: 0,\r\n  resetTimer() {\r\n    this.timer = 0;\r\n  }\r\n});\r\n\r\nstate.increment = action(value => (state.timer = value + 1));\r\nstate.decrement = action(value => (state.timer = value - 1));\r\n\r\n/* 观察状态改变的函数 */\r\nautorun(function() {\r\n  console.log(\"state.timer\", state.timer);\r\n});\r\nexport default state;\r\n","import todo from './todo'\r\nimport layout from \"./layout\";\r\n\r\nconst stores = {\r\n  todo,\r\n  layout\r\n}\r\n\r\nexport default stores","import {observable} from 'mobx';\r\n\r\nvar state = observable({\r\n    layout:{\r\n      value:12,\r\n      name:'this is a layout data'\r\n    }\r\n    \r\n});\r\n\r\nexport default state;","import React from 'react'\r\nimport { BrowserRouter, Route, Redirect } from 'react-router-dom'\r\n\r\n// Normalize all paths to not have trailing slashes even if they\r\n// matched <Route> with one:\r\nconst Router = ({ children }) => (\r\n  <BrowserRouter>\r\n    <Route\r\n      render={({ location: { pathname, search, hash } }) =>\r\n        pathname !== '/' && pathname.slice(-1) === '/' ? (\r\n          <Redirect to={`${pathname.slice(0, -1)}${search}${hash}`} />\r\n        ) : (\r\n          children\r\n        )\r\n      }\r\n    />\r\n  </BrowserRouter>\r\n)\r\n\r\nexport default Router","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"mobx-react\";\nimport { Switch, Route, Redirect } from \"react-router-dom\";\nimport { configure } from \"mobx\";\n\nimport App from \"./App\";\nimport TimerView from \"./views/timerView\";\nimport stores from \"./stores\";\nimport Router from \"./routers\";\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\nconfigure({ enforceActions: \"observed\" }) // 不允许在动作之外进行状态修改\n\nReactDOM.render(\n  <Provider {...stores}>\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={App} />\n        <Route exact path=\"/auth\" component={TimerView} />\n        <Redirect to='/' />\n      </Switch>\n    </Router>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}